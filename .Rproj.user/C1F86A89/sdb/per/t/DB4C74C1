{
    "contents" : "# Enter the cell distribution\ndoses <- c(0, 0.1, 0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5)\ncell <- c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59)\naberr <- c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)\nX0 <- c(4992, 4988, 1987, 1947, 1736, 1064, 474, 251, 104, 35, 11)\nX1 <- c(8, 14, 20, 55, 92, 99, 76, 63, 72, 41, 19)\nX2 <- c(NA, NA, 1, NA, 4, 5, 12, 17, 15, 21, 11)\nX3 <- c(rep(NA, 11 - 4), 2, 2, 4, 9)\nX4 <- c(rep(NA, 11 - 2), 2, 6)\nX5 <- c(rep(NA, 11 - 1), 3)\nCobalt60 <- data.frame(doses, cell, aberr, X0, X1, X2, X3, X4, X5)\nCobalt60\n\nsave(Cobalt60, file = 'data/Cobalt60.rda')\ndoses <- c(0, 0.051, 0.104, 0.511, 1.01, 1.536, 2.05, 2.526, 3.029)\ncell <- c(2000, 900, 1029, 1136, 304, 142, 137, 144, 98)\naberr <- c(3, 19, 27, 199, 108, 96, 120, 148, 108)\nX0 <- c(1997, 881, 1004, 960, 217, 75, 63, 66, 47)\nX1 <- c(3, 19, 23, 154, 69, 40, 44, 34, 16)\nX2 <- c(NA, NA, 2, 21, 15, 25, 16, 25, 17)\nX3 <- c(NA, NA, NA, 1, 3, 2, 12, 14, 17)\nX4 <- c(NA, NA, NA, NA, NA, NA, 2, 3, 0)\nX5 <- c(NA, NA, NA, NA, NA, NA, NA, 2, NA)\nX6 <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA)\nX7 <- c(NA, NA, NA, NA, NA, NA, NA, NA, 1)\nMev4He <- data.frame(doses, cell, aberr, X0, X1, X2, X3, X4, X5, X6, X7)\nMev4He\nsave(Mev4He, file = 'data/Mev4He.rda')\nx = Cobalt60; cells = Cobalt60$cell; aberrations = Cobalt60$aberr; cell.dist = c(4, 9);\ndoses = Cobalt60$doses\nu.test <- function(x, cells, aberrations, cell.dist) {\n  if (!is.data.frame(x)) \n    stop(\"x should be a data.frame class\")\n  if (!is.numeric(cell.dist))\n    stop(\"cell.dist should be a vector of columns of the cell distribution, in this form c(start, end).\")\n  \n  cells <- eval(substitute(cells), envir = x, enclos = parent.frame())\n  aberrations <- eval(substitute(aberrations), envir = x, enclos = parent.frame())\n  xmat <- as.matrix(x)\n  \n  xmat.dist <- list(); disp.idx <- numeric(); u.result <- numeric()\n  for (i in 1L:nrow(x)) {\n    xmat.idx <- as.numeric(xmat[i, cell.dist[1L]:cell.dist[2L]][complete.cases(xmat[i, cell.dist[1L]:cell.dist[2L]])])\n    \n    for (j in 1L:length(xmat.idx))\n      xmat.dist[[j]] <- rep(j - 1L, xmat.idx[j])\n    \n    disp.idx[i]  <- var(unlist(xmat.dist)) / mean(unlist(xmat.dist))\n    u.result[i] <- (disp.idx[i] - 1L) * sqrt((cells[i] - 1L) / (2L * (1L - (1L / aberrations[i]))))\n  }\n  x$disp_idx <- disp.idx; x$u_test <- u.result\n  return(x)\n}\n\nrm(list = fit)\nx = Cobalt60; cell.dist = c(4, 9); disp_idx = 1; cells = cell;\naberrations = aberr; doses = doses; \nx = auntCelia; cells = auntCelia$Cells; aberrations = auntCelia$Dice; \ndist = NULL;\ndoses = auntCelia$Dose; cell.dist = c(4, 8); curve = TRUE; model = \"l\";\nna.rm = TRUE\nmodel = \"lq\"; phi = 1; curve = TRUE; level = 0.95\nlibrary(Radica)\nx = PNRIdata; cells = PNRIdata$Cells; aberrations = PNRIdata$Dice;\ndoses = PNRIdata$Dose; cell.dist = c(4, 9); curve = TRUE\ncalib_curve <- function(x, cells, aberrations, doses, cell.dist, model = \"lq\",\n                        level = 0.95, dist = NULL, curve = FALSE) {\n  \n  cells <- eval(substitute(cells), envir = x, enclos = parent.frame())\n  aberrations <- eval(substitute(aberrations), envir = x, enclos = parent.frame())\n  doses <- eval(substitute(doses), envir = x, enclos = parent.frame())\n  x <- u.test(x = x, cells = cells, aberrations = aberrations,\n              cell.dist = cell.dist)\n  \n  z <- - qnorm((1 - level) / 2)\n  x0 <- cells; x1 <- cells * doses; x2 <- cells * doses * doses\n  xdata <- data.frame(x0, x1, x2, aberrations)\n  x\n  if (model == \"lq\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x1 + x2, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n    summary(result)\n    \n  } else if (model == \"lq\" && !is.null(dist) && dist == \"over-dispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1 + x2, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"l\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n    disp_idx\n    \n  } else if (model == \"l\" && !is.null(dist) && dist == \"over-dispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  }\n  summary(result)\n  summary(residuals(result))\n  xfit <- predict.glm(result, se.fit = TRUE)\n  if (curve == TRUE) {\n    plot(doses, aberrations / cells, xlab = \"Doses\", ylab = \"Aberration per cell\", \n         col = \"blue\", pch = 19, cex = 1.5)\n    lines(doses, xfit$fit / cells, col = \"red\", lwd = 4)\n    lines(doses, (xfit$fit + (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    lines(doses, (xfit$fit - (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    legend(x = \"topleft\", legend = c(\"Data\", \"Fitted\", paste(100 * level, \"% Confidence Interval\", sep = \"\")), fill = c(\"blue\", \"red\", \"black\"), \n           border = c(\"blue\", \"red\", \"black\"), bty = \"n\")\n  }\n  \n  result$fitted.values\n  xfit\n  \n  chisq.test(x = aberrations, p = xfit$fit / sum(xfit$fit), )\n  res.smry <- summary(result, correlation = TRUE)\n  \n  chisq.p <- pchisq(deviance(res.smry), df.residual(res.smry), lower.tail = FALSE)\n  list(preliminary = x, summary = res.smry, goodness_of_fit = chisq.p, fitted_values = xfit)\n}\n\n\nlibrary(Radica)\npnri.out <- fit.coef(PNRIdata, cells = Cells, aberrations = Dice,\n                     doses = Dose, cell.dist = c(4, 10), na.rm = TRUE, curve = FALSE)\nx = pnri.out; level = 0.95\npnri.out$summary$coefficients\ndose.curve <- function (x, level = 0.95) {\n  doses <- x$preliminary[, 1]; cells <- x$preliminary[, 2]; aberrations <- x$preliminary[, 3]\n  fit <- x$fitted_values$fit; se.fit <- x$fitted_values$se.fit; \n  cf <- x$summary$coefficients[, 1]\n  \n  z <- - qnorm((1 - level) / 2)\n  plot(doses, aberrations / cells, xlab = \"Doses\", ylab = \"Aberration per cell\", \n       col = \"blue\", pch = 19, cex = 1.5)\n  curve()\n  lines(doses, fit / cells, col = \"red\", lwd = 4)\n  lines(doses, (fit + (se.fit * z)) / cells, col = \"black\", lwd = 2)\n  lines(doses, (fit - (se.fit * z)) / cells, col = \"black\", lwd = 2)\n  legend(x = \"topleft\", legend = c(\"Data\", \"Fitted\", paste(100 * level, \"% Confidence Interval\", sep = \"\")), fill = c(\"blue\", \"red\", \"black\"), \n         border = c(\"blue\", \"red\", \"black\"), bty = \"n\")\n}\npchisq(q = res.smry$deviance, df = res.smry$df.residual, lower.tail = FALSE)\n?pchisq\nres.smry$df.residual\ncobalt.utest <- u.test(Cobalt60, cells = cell, aberrations = aberr, cell.dist = c(start = 4, end = 9))\ncobalt.curve <- calib_curve(Cobalt60, cell.dist = c(4, 9), cells = cell, aberrations = aberr,\n                            doses = doses, model = \"lq\", dist = NULL, curve = TRUE)\ncobalt.curve\ncobal\nmev4He.utest <- u.test(ev4He, cells = cell, aberrations = aberr, cell.dist = c(4, 11))\nmev4he <- fit.coef(Mev4He, cells = cell, aberrations = aberr, doses = doses, plot = TRUE, model = \"l\", phi = NULL)\nmev4He.utest\nmev4He.curve$\nMev4He\n\nfit.coef(x, cells, aberrations, doses, cell.dist,\n         model = \"lq\", level = 0.95, dist = NULL, curve = FALSE)\n# an R package for Statistical Analysis of Chromosomal Aberration (RSACA)\nrequire(sjPlot)\n`[.myclass` <- function (x, i) {\n  y <- unclass(x)[i]\n  ns <- attr(x, \"n\")[i]\n  class(y) <- \"myclass\"\n  attr(y, \"n\") <- ns\n  y\n}\n\ntrack <- setClass(\"u test\",\n                  slots = c(x = \"data.frame\"))\n## an object from the class\nt1 <- track(x = cobalt.utest)\nclass(t1)\nt1\nmyclass(x)\nlibrary(sjPlot)\nsjt.df(cobalt60)\n##############################\n\n## latest changes: H. Braselmann, 2010, April 9th\n## Helmholtz Zentrum MÃ¼nchen, Department of Radiation Cytogenetics, Germany\n## contact details: braselm@helmholtz-muenchen.de\n## user part: data\n# cobalt-60 gamma (86)\n\ndose <- c(0, 0.1, 0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5)\nab <- c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)\ncells <- c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59)\ndisp <- 1.0\n\ndose <- auntCelia$Dose\nab <- auntCelia$Dice\nab[c(1,2,3)] <- 1\ncells <- auntCelia$Cells\ndisp <- 1\n#disp<- c(1.0,1.0,1.08,0.97,1.03,1.0,1.06,1.14,0.83,0.88,1.15)\n## user part: option settings\nsigma <- 1\n# regression sigma 1 or\n#sigma<- NULL # NULL (regression sigma estimated)\nwt <- 1 / disp # weight setting, required!\nmodel <- \"lq\"\n#model<- \"l\"\n# \"l\" for linear or \"lq\" for linear quadratic\n# a background value (c) is fitted in both options\n############################################################################\n## execution part: changes recommended only for developpers of the script ##\n############################################################################\nif (length(disp) == 1) disp <- rep(disp, length(dose))\nkurvendaten <- data.frame(dose, ab, cells, disp)\nprint(kurvendaten)\nx0 <- cells\nx1 <- cells*dose\nx2 <- cells*dose*dose\nmodelldaten <- data.frame(x0, x1, x2, ab)\nmodelldaten\nif (length(wt) == 1) wt <- rep(wt, length(dose))\nif (model == \"lq\" & sigma == 1)\n  result<-glm(ab ~ -1 + x0+x1+x2,family=poisson(link = \"identity\"), weights=wt, data=modelldaten)\nif (model==\"lq\" & is.null(sigma))\n  result<-glm(ab ~ -1 + x0+x1+x2,family=quasipoisson(link = \"identity\"), weights=wt, data=modelldaten)\nif (model==\"l\" & sigma==1)\n  result<-glm(ab ~ -1 + x0+x1,family=poisson(link = \"identity\"), weights=wt, data=modelldaten)\nif (model==\"l\" & is.null(sigma))\n  result<-glm(ab ~ -1 + x0+x1,family=quasipoisson(link = \"identity\"), weights=wt, data=modelldaten)\nsmry<-summary(result,correlation=TRUE)\nsmry$coefficients\nsmry$correlation\ncorma<-smry$correlation\nbstat<-smry$coefficients\nseb<-bstat[,2]\nbstat\n?outer\nvakoma<-corma*outer(seb,seb)\nvakoma<-vcov(result)\n#######################\n## output of results ##\n#######################\ncat(\"\\n\")\ncat(\"Result of curve fit 'result'\\n\")\ncat(\"----------------------------\\n\")\nprint(result)\ncat(\"\\n\")\ncat(\"assumed sigma\\n\")\nprint(sigma)\ncat(\"\\n\")\ncat(\"Coefficients 'bstat'\\n\")\nprint(bstat)\ncat(\"\\n\")\ncat(\"variance-covariance matrix 'vakoma'\\n\")\nprint(vakoma)\ncat(\"\\n\")\ncat(\"correlation matrix 'corma'\\n\")\nprint(corma)\n\npar(lwd=2)\nplot(dose, ab/cells)\nif (model==\"lq\") curve(bstat[1,1]+bstat[2,1]*x+bstat[3,1]*x*x,0,max(dose), add=TRUE)\nif (model==\"l\") curve(bstat[1,1]+bstat[2,1]*x,0,max(dose), add=TRUE)\n\n##############################################\nPNRIdata <- read.table(header = TRUE, text = \"\nDose Cells Dice   X0 X1 X2 X3 X4 X5 X6\n0.10\t 179    3\t 176\t3\t 0\t0\t 0\t0\t 0\n0.25\t 133    1\t 132\t1\t 0\t0\t 0\t0\t 0\n0.50\t  79 \t  1\t  78\t1\t 0\t0\t 0\t0\t 0\n0.75\t  75\t  4\t  71\t4\t 0\t0\t 0\t0\t 0\n1.00\t 212\t 11\t 198 11\t 0\t0\t 0\t0\t 0\n2.00\t  76\t 10\t  67\t8\t 1\t0\t 0\t0\t 0\n4.00\t  38\t 29\t  16 14\t 6\t1\t 0\t0\t 0\n6.00\t  17\t 20\t   7\t6\t 1\t1\t 1\t1\t 0\")\nPNRIdata\nsave(PNRIdata, file = 'data/PNRIdata.rda')\n\noutData <- fit.coef(auntCelia, cells = Cells, aberrations = Dice, dist = NULL,\n                    doses = Dose, cell.dist = c(4, 8), curve = TRUE, model = \"lq\",\n                    na.rm = TRUE)\noutData\n\nlibrary(Radica)\n\npnri.out <- fit.coef(PNRIdata, cells = Cells, aberrations = Dice,\n                    doses = Dose, cell.dist = c(4, 10), na.rm = TRUE)\ncc <- pnri.out$summary$coefficients\nccse <- pnri.out$fitted_values\nse1 <- pnri.out$summary$coefficients[1, 2]\nse2 <- pnri.out$summary$coefficients[2, 2]\nse3 <- pnri.out$summary$coefficients[3, 2]\nplot(PNRIdata$Dose, PNRIdata$Dice / PNRIdata$Cells)\ncurve(cc[1,1]+cc[2,1]*x+cc[3,1]*x*x,0,max(PNRIdata$Dose), add=TRUE)\ncurve((cc[1,1] + se1)+(cc[2,1] + se2)*x+(cc[3,1] + se3)*x*x,0,max(PNRIdata$Dose), add=TRUE)\ncurve((cc[1,1] - se1)+(cc[2,1] - se2)*x+(cc[3,1] - se3)*x*x,0,max(PNRIdata$Dose), add=TRUE)\nlines(PNRIdata$Dose, ccse$fit / PNRIdata$Cells)\nlines(PNRIdata$Dose, ((ccse$fit + ccse$se.fit * 1.65) / PNRIdata$Cells))\nlines(PNRIdata$Dose, ((ccse$fit - ccse$se.fit * 1.65) / PNRIdata$Cells))\ncurve()\npnri.out\nccse$se.fit\nccse$fit + t(cc[,1]) %*% vcov(pnri.out$summary) %*% cc[, 1]\nccse$fit + ccse$se.fit\ndose.curve(pnri.out)\ncobalt1\nlibrary(RSACA)\n?fit.coef\nsqrt(1/0)\na <- u.test1(x=auntCelia,cells=Cells,aberrations=Dice, cell.dist = c(4, 8))\na\n\n\nu.test <- function(x, cells, aberrations, cell.dist) {\n  if (!is.data.frame(x)) \n    stop(\"x should be a data.frame class\")\n  if (!is.numeric(cell.dist))\n    stop(\"cell.dist should be a vector of columns of the cell distribution, in this form c(start, end).\")\n  \n  xmat <- as.matrix(x)\n  xmat.dist <- list(); disp.idx <- u.result <- u.decsn <- numeric();\n  for (i in 1L:nrow(x)) {\n    xmat.idx <- as.numeric(\n      xmat[i, cell.dist[1L]:cell.dist[2L]][complete.cases(\n        xmat[i, cell.dist[1L]:cell.dist[2L]])])\n    \n    for (j in 1L:length(xmat.idx))\n      xmat.dist[[j]] <- rep(j - 1L, xmat.idx[j])\n    \n    disp.idx[i]  <- var(unlist(xmat.dist)) / mean(unlist(xmat.dist))\n    if (aberrations[i] == 1) {\n      u.result[i] <- NA; u.decsn[i] <- NA\n    } else {\n      u.result[i] <- (disp.idx[i] - 1L) * \n        sqrt((cells[i] - 1L) / (2L * (1L - (1L / aberrations[i])))) \n      if (u.result[i] < - 1.96)\n        u.decsn[i] <- \"under\"\n      if (u.result[i] > 1.96)\n        u.decsn[i] <- \"over\"\n      if ((u.result[i] >= - 1.96) && (u.result[i] <= 1.96))\n        u.decsn[i] <- \"normal\"\n    }\n  }\n  x$disp_idx <- disp.idx; x$u_test <- u.result; x$u_decsn <- u.decsn\n  return(x)\n}\n\n\n# Making fake data and fitting the model and getting a prediction\nset.seed(500)\ndat <- data.frame(x = runif(20), y = rbinom(20, 1, .5))\no <- glm(y ~ x, data = dat)\npred <- predict(o, newdata = dat, se.fit = TRUE)\nsummary(o)\n# To obtain a prediction for x=1.5 I'm really\n# asking for yhat = b0 + 1.5*b1 so my\n# C = c(1, 1.5)\n# and vcov applied to the glm object gives me\n# the covariance matrix for the estimates\nC <- c(1, 0.1946735)\nstd.er <- sqrt(t(C) %*% vcov(o) %*% C)\ndat[1,]\npred$se.fit\nstd.er\n",
    "created" : 1402113639387.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2493429299",
    "id" : "DB4C74C1",
    "lastKnownWriteTime" : 1402375399,
    "path" : "~/Documents/BioDosimetry/BluePrint.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}