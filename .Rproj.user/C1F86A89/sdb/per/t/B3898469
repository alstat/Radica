{
    "contents" : "#' Fit coefficients\n#' @export\n#' \n#' @description\n#' Fit coefficients to the chromosomal aberration data.\n#' \n#' @param x a data frame consisting the total number of cells, \n#'          number of aberrations detected, doses and cell distribution\n#'          of chromosomal aberration;\n#' @param cells column name of the total number of cells in x;\n#' @param aberrations column name of the aberrations detected in x;\n#' @param doses column name of the doses in x;\n#' @param cell.dist a vector of length 2 for the starting and end column of\n#'        the cell distribution;\n#' @param model a character for type of regression model, default is set to\n#'        \\code{\"lq\"}, for linear-quadratic model. And \\code{\"l\"} for linear model;\n#' @param dist if set to \\code{NULL}, then the data is considered as non-overdispersed,\n#'        and thus uses the Poisson family with dispersion = 1. But if set to\n#'        \\code{\"overdispersed\"}, then quassi-Possoin family is considered with \n#'        the dispersion not restricted to 1, but is estimated. \n#' @param disp_idx a numeric for the dispersion index. If \\code{NULL} the \n#'        \\code{disp_idx} is computed from the cell distribution of\n#'        the chromosomal aberrations.\n#' @param level a numeric for the confidence level of the fitted values.\n#' @param curve logical option for plot of the calibration curve. If set to\n#'        \\code{TRUE}, calibration curve is generated.\n#' @param na.rm logical switch, if set to TRUE, missing values are ommitted from\n#'        the computation.\n#' \n#' @details\n#' The function fits the coefficient into the data using the linear-quadratic\n#' model:\n#'                 \\deqn{Y = C + \\alpha*D + \\beta*D ^ 2}\n#' where \\eqn{Y} is the yields of the chromosome aberrations; \\eqn{C}, \n#' \\eqn{\\alpha} and \\eqn{\\beta} are the coefficients need to be \n#' estimated; and \\eqn{D} is the dose.\n#' \n#' or, for high LET radiation, the \\eqn{\\alpha}-term becomes large and \n#' eventually the \\eqn{\\beta}-term becomes biologically less relevant and\n#' also statistically ‘masked’ and the dose response is approximated by \n#' the linear equation\n#'                 \\deqn{Y = C + \\alpha*D}\n#' For dicentrics, irradiation with X or gamma rays produces a\n#' distribution of damage which is very well represented by the Poisson\n#' distribution. In contrast, neutrons and other types of high LET \n#' radiation produce distributions which display overdispersion, where \n#' the variance (\\eqn{\\sigma^2}) exceeds the mean (\\eqn{y}).\n#' \n#' Because curve fitting methods are based on Poisson statistics, the dicentric cell\n#' distribution should be tested for compliance with the Poisson distribution for each dose used\n#' to construct the calibration curve. Nowadays, the most widely used test is the u test.\n#' The u test statistic is a normalized unit of the dispersion index (\\eqn{\\sigma^2/y}), \n#' which for a Poisson distribution should be unity. u values higher than 1.96 indicate \n#' overdispersion (with a two-sided significance level, \\eqn{\\alpha = 0.025}).\n#' \n#' The function returns a list:\n#' \\itemize{\n#' \\item{\\code{preliminary}}{ a data frame of the original data but with new columns,\n#'        for \\code{disp_idx} (dispersion index) and \\code{u_test} (Poisson u test);}\n#' \\item{\\code{summary}}{ a summary of the GLM model.}\n#' }\n#' \n#' @examples\n#' library(RSACA) \n#' \n#' cobalt1 <- fit.coef(Cobalt60, cells = cell, aberrations = aberr,\n#'   doses = doses, cell.dist = c(4, 9), curve = TRUE)\n#' \n#' # for overdispersion (see if residual deviance is much larger than degrees\n#' # of freedom) consider quasi-Poisson family.\n#' cobalt2 <- fit.coef(Cobalt60, cells = cell, aberrations = aberr,\n#'   doses = doses, cell.dist = c(4, 9), dist = \"over-dispersed\", curve = TRUE)\n#'   \n#' # For high Linear Energy Transfer (LET) data, we consider the linear model\n#' # with over-dispersed distribution\n#' mevhe <- fit.coef(Mev4He, cells = cell, aberrations = aberr, model = \"l\",\n#'   doses = doses, cell.dist = c(4, 11), dist = \"over-dispersed\", curve = TRUE)\n#' \n#' @references\n#' EPR-Biodosimetry (2011). \\href{http://www-pub.iaea.org/MTCD/publications/PDF/EPR-Biodosimetry%202011_web.pdf}{\\emph{Cytogenetic Dosimetry: Applications in Preparedness for and \n#' Response to Radiation Emergencies}}.\n#' \n#' Quick-R. \\href{http://www.statmethods.net/advstats/glm.html}{\\emph{Generalized Linear Models}}. Retrieved June 4, 2014.\nfit.coef <- function(x, cells, aberrations, doses, cell.dist, model = \"lq\",\n                     level = 0.95, dist = NULL, curve = FALSE, na.rm = FALSE) {\n  \n  cells <- eval(substitute(cells), envir = x, enclos = parent.frame())\n  aberrations <- eval(substitute(aberrations), envir = x, enclos = parent.frame())\n  doses <- eval(substitute(doses), envir = x, enclos = parent.frame())\n  x <- u.test(x = x, cells = cells, aberrations = aberrations,\n              cell.dist = cell.dist)\n  \n  z <- - qnorm((1 - level) / 2)\n  x0 <- cells; x1 <- cells * doses; x2 <- cells * doses * doses\n  xdata <- data.frame(x0, x1, x2, aberrations)\n  if (model == \"lq\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx, na.rm = na.rm), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1 + x2, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"lq\" && !is.null(dist) && dist == \"overdispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1 + x2, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"l\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx, na.rm = na.rm), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"l\" && !is.null(dist) && dist == \"overdispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  }\n  \n  xfit <- predict.glm(result, se.fit = TRUE)\n  if (curve == TRUE) {\n    plot(doses, aberrations / cells, xlab = \"Doses\", ylab = \"Aberration per cell\", \n         col = \"blue\", pch = 19, cex = 1.5)\n    lines(doses, xfit$fit / cells, col = \"red\", lwd = 4)\n    lines(doses, (xfit$fit + (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    lines(doses, (xfit$fit - (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    legend(x = \"topleft\", legend = c(\"Data\", \"Fitted\", paste(100 * level, \"% Confidence Interval\", sep = \"\")), fill = c(\"blue\", \"red\", \"black\"), \n           border = c(\"blue\", \"red\", \"black\"), bty = \"n\")\n  }\n  \n  res.smry <- summary(result, correlation = TRUE)\n  chisq.p <- pchisq(deviance(res.smry), df.residual(res.smry), lower.tail = FALSE)\n  return(list(preliminary = x, summary = res.smry, goodness_of_fit = chisq.p, fitted_values = xfit))\n}",
    "created" : 1402118046135.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1315093449",
    "id" : "B3898469",
    "lastKnownWriteTime" : 1402067449,
    "path" : "~/Documents/Files/R Files/Projects/RSACA/R/fit.coef.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}