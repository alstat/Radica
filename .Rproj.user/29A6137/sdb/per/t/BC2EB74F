{
    "collab_server" : "",
    "contents" : "# Functions\n# \nu.test <- function(x, cells, aberrations, cell.dist) {\n  if (!is.data.frame(x)) \n    stop(\"x should be a data.frame class\")\n  if (!is.numeric(cell.dist))\n    stop(\"cell.dist should be a vector of columns of the cell distribution, in this form c(start, end).\")\n  \n  xmat <- as.matrix(x)\n  xmat.dist <- list(); disp.idx <- u.result <- u.decsn <- numeric();\n  for (i in 1L:nrow(x)) {\n    xmat.idx <- as.numeric(xmat[i, cell.dist[1L]:cell.dist[2L]][complete.cases(xmat[i, cell.dist[1L]:cell.dist[2L]])])\n    \n    for (j in 1L:length(xmat.idx))\n      xmat.dist[[j]] <- rep(j - 1L, xmat.idx[j])\n    \n    disp.idx[i]  <- var(unlist(xmat.dist)) / mean(unlist(xmat.dist))\n    if (aberrations[i] == 1) {\n      u.result[i] <- NA; u.decsn[i] <- NA\n    } else {\n      u.result[i] <- (disp.idx[i] - 1L) * sqrt((cells[i] - 1L) / (2L * (1L - (1L / aberrations[i])))) \n      if (u.result[i] < - 1.96)\n        u.decsn[i] <- \"under\"\n      if (u.result[i] > 1.96)\n        u.decsn[i] <- \"over\"\n      if ((u.result[i] >= - 1.96) && (u.result[i] <= 1.96))\n        u.decsn[i] <- \"normal\"\n    }\n  }\n  x$disp_idx <- disp.idx; x$u_test <- u.result; x$u_decsn <- u.decsn\n  return(x)\n}\n\n# Fit coefficients to the chromosomal aberration data.\nx = PNRI.df; cells = PNRI.df$Cells; aberrations = PNRI.df$Dice; doses = PNRI.df$Dose;\ncell.dist = c(4, 10); na.rm = TRUE; curve = FALSE; level = 0.95; model = \"lq\"; dist = NULL\nfit.coef <- function(x, cells, aberrations, doses, cell.dist, model = \"lq\",\n                     level = 0.95, dist = NULL, curve = FALSE, na.rm = FALSE) {\n  \n  cells <- eval(substitute(cells), envir = x, enclos = parent.frame())\n  aberrations <- eval(substitute(aberrations), envir = x, enclos = parent.frame())\n  doses <- eval(substitute(doses), envir = x, enclos = parent.frame())\n  x <- u.test(x = x, cells = cells, aberrations = aberrations,\n              cell.dist = cell.dist)\n  z <- - qnorm((1 - level) / 2)\n  x0 <- cells; x1 <- cells * doses; x2 <- cells * doses * doses\n  xdata <- data.frame(x0, x1, x2, aberrations)\n  if (model == \"lq\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx, na.rm = na.rm), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1 + x2, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"lq\" && !is.null(dist) && dist == \"overdispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1 + x2, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"l\" && is.null(dist)) {\n    disp_idx <- rep(mean(x$disp_idx, na.rm = na.rm), nrow(x)); weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = poisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  } else if (model == \"l\" && !is.null(dist) && dist == \"overdispersed\") {\n    disp_idx <- x$disp_idx; weights <- 1L / disp_idx;\n    result <- glm(aberrations ~ -1L + x0 + x1, family = quasipoisson(link = \"identity\"), \n                  weights = weights, data = xdata)\n  }\n  \n  xfit <- predict.glm(result, se.fit = TRUE)\n  if (curve == TRUE) {\n    plot(doses, aberrations / cells, xlab = \"Doses\", ylab = \"Aberration per cell\", \n         col = \"blue\", pch = 19, cex = 1.5)\n    lines(doses, xfit$fit / cells, col = \"red\", lwd = 4)\n    lines(doses, (xfit$fit + (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    lines(doses, (xfit$fit - (xfit$se.fit * z)) / cells, col = \"black\", lwd = 2)\n    legend(x = \"topleft\", legend = c(\"Data\", \"Fitted\", paste(100 * level, \"% Confidence Interval\", sep = \"\")), fill = c(\"blue\", \"red\", \"black\"), \n           border = c(\"blue\", \"red\", \"black\"), bty = \"n\")\n  }\n  \n  res.smry <- summary(result, correlation = TRUE)\n  df.residual(res.smry)\n  chisq.p <- pchisq(deviance(res.smry), df.residual(res.smry), lower.tail = FALSE)\n  return(list(preliminary = x, summary = res.smry, goodness_of_fit = chisq.p, fitted_values = xfit))\n}\n\n# Dose-Curve 0 to 6\ndose.curve <- function (x, level = 0.95) {\n  doses <- x$preliminary[, 1]; cells <- x$preliminary[, 2]; aberrations <- x$preliminary[, 3]\n  fit <- x$fitted_values$fit; se.fit <- x$fitted_values$se.fit; \n  z <- - qnorm((1 - level) / 2)\n  dev.new(width=5, height=4)\n  plot(doses, aberrations / cells, xlab = \"Doses\", ylab = \"Aberration per cell\", \n       col = \"blue\", pch = 19, cex = 1.5, axes = FALSE)\n  ticks = c(0, 0.1, 0.25, 0.5, 0.75, 1:6);\n  axis(side = 1, at = ticks);\n  axis(side = 2);\n  lines(doses, fit / cells, col = \"red\", lwd = 4)\n  \n  lines(doses, (fit + (se.fit * z)) / cells, col = \"black\", lwd = 2)\n  lines(doses, (fit - (se.fit * z)) / cells, col = \"black\", lwd = 2)\n  legend(x = \"topleft\", legend = c(\"Data\", \"Fitted\"), fill = c(\"blue\", \"red\"), \n         border = c(\"blue\", \"red\"), bty = \"n\")\n}\n\nx <- pnri.out\nse.fit <- sqrt(R) * sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (doses ^ 2) + vcov_mat[3, 3] * (doses ^ 4) +\n                           2 * vcov_mat[1, 2] * doses + 2 * vcov_mat[1, 3] * (doses ^ 2) + 2 * vcov_mat[2, 3] * (doses ^ 3))\nplot(doses, aberrations / cells)\ncurve(mod_est[1,1]+mod_est[2,1]*x+mod_est[3,1]*x*x,0,max(doses), add=TRUE)\ncurve(mod_est[1,1]+mod_est[2,1]*x+mod_est[3,1]*(x^2) + sqrt(qchisq(0.95, 3)) * \n        sqrt(vcov_mat[1,1] + vcov_mat[2,2] * (x ^2) + vcov_mat[3,3] * (x ^ 4) +\n               2 * vcov_mat[1,2] * x + 2 * vcov_mat[1,3] * (x ^ 2) +\n               2 * vcov_mat[2,3] * (x ^ 3)), 0, max(doses), add = TRUE)\n\nlines(doses, fit / cells + se.fit)\nlines(doses, fit)\ndose.curve <- function (x, level = 0.95, newdat) {\n  doses <- x$preliminary[, 1]; cells <- x$preliminary[, 2]; aberrations <- x$preliminary[, 3]\n  fit <- x$fitted_values$fit; mod_est <- x$summary$coefficients; mod_cor <- x$summary$correlation\n  est_se <- mod_est[, 2]; vcov_mat <- mod_cor * outer(est_se, est_se)\n  R <- qchisq(level, df = 3)\n  \n  xyplot(aberrations / cells ~ doses, xlab = \"Doses\", \n         ylab = \"Aberration per cell\", cex = 1.5, pch = 19, col = \"#0080ff\",\n         key = list(\n           corner = c(.98, .02),\n           rectangles = list(col = c(\"#0080ff\", \"#ff00ff\", \"darkgreen\"), size = 4.5, height = 0.8),\n           text = list(c(\"Data\", \"Fitted\", \"95% C.I.\"))),\n         #scales = list(\n         # x = list(\n         #    at = c(0, 0.25, 0.75, 1:6),\n         #    labels = c(0, 0.25, 0.75, 1:6))),\n         panel = function (x, y, ...) {\n           panel.grid(h = -1, v = -1, col.line = \"cornsilk2\")\n           #panel.abline(v = c(.1, .25, .5, .75), col = \"cornsilk2\")\n           panel.xyplot(x, y, ...)\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2), from = 0, to = max(doses), lwd = 2, col = \"#ff00ff\")\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) + sqrt(R) * \n                         sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                2 * vcov_mat[1, 2] * x + 2 * vcov_mat[1, 3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) - sqrt(R) * \n                         sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                2 * vcov_mat[1,2] * x + 2 * vcov_mat[1,3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n         })\n}\n\n# 0 to 1 x\ndose.curve1 <- function (x, level = 0.95) {\n  doses <- x$preliminary[, 1]; cells <- x$preliminary[, 2]; aberrations <- x$preliminary[, 3]\n  fit <- x$fitted_values$fit; mod_est <- x$summary$coefficients; mod_cor <- x$summary$correlation\n  est_se <- mod_est[, 2]; vcov_mat <- mod_cor * outer(est_se, est_se)\n  R <- qchisq(level, df = 3)\n  \n  xyplot(aberrations / cells ~ doses, xlab = \"Doses\", \n         ylab = \"Aberration per cell\", cex = 1.5, pch = 19, col = \"#0080ff\", xlim = c(-0.05, 1.05), ylim = c(-0.005, 0.085),\n         key = list(\n           corner = c(.02, .98),\n           rectangles = list(col = c(\"#0080ff\", \"#ff00ff\", \"darkgreen\"), size = 4.5, height = 0.8),\n           text = list(c(\"Data\", \"Fitted\", \"95% C.I.\"))),\n         scales = list(\n           x = list(\n             at = c(0, 0.1, 0.25, 0.5, 0.75, 1),\n             labels = c(0, 0.1, 0.25, 0.5, 0.75, 1))),\n         panel = function (x, y, ...) {\n           panel.grid(h = -1, v = 0, col.line = \"cornsilk2\")\n           panel.abline(v = c(0, .1, .25, .5, .75, 1), col = \"cornsilk2\")\n           panel.xyplot(x, y, ...)\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2), from = 0, to = max(doses), lwd = 2, col = \"#ff00ff\")\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) + sqrt(R) * \n                         sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                2 * vcov_mat[1, 2] * x + 2 * vcov_mat[1, 3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n           panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) - sqrt(R) * \n                         sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                2 * vcov_mat[1,2] * x + 2 * vcov_mat[1,3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n         })\n}\nlibrary(lattice)\nlibrary(reshape2)\ndose_curve(pnri.out, xaxis = c(0, 0.1, 0.25, 0.5, 0.75, 1:6))\ndose_curve(pnri.out, newdat = newdf)\n\nPNRI.df <- read.table(\"~/Documents/PNRI2.txt\", header = TRUE)\nPNRI.df\npnri.out <- fit_coef(\n  PNRI.df, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 10), na.rm = TRUE, curve = FALSE\n)\npnri.out\nmnuc_fit\nD <- (-0.0336027 + sqrt((0.0336027 ^ 2) + (4 * 0.0236312) * (0 - 0.0003298))) / (2 * 0.0236312)\nD\ndfunc <- function(y) {\n  abs((-0.0336027 + sqrt((0.0336027 ^ 2) + (4 * 0.0236312) * (y - 0.0003298))) / (2 * 0.0236312))\n}\ndfunc(15/44)\naa <- matrix(NA, ncol = 2, nrow = 101)\nsave()\na[i,]\nseq(0, 1, by = .01)\nfor(i in c(seq(0, 1, by = .01))) {\n  aa[i * 100 + 1, ] <- c(i, dfunc(i))\n}\n\ncolnames(aa) <- c(\"Abb Per Cell\", \"Dose\")\naa\npnri.out$preliminary\npnri.out$summary\ncoef(pnri.out$summary)[]\npredict(pnri.out$summary)\ndose.curve(pnri.out)\n\n\nnewdf <- read.table(\"~/Documents/PNRI3.txt\", header = TRUE)\nnewdf\nnewout <- Radica::fit_coef(\n  newdf, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 10), na.rm = TRUE, curve = FALSE\n)\nnewdf\ndose_curve(pnri.out, newdat = newdf)\nnewout$preliminary\nnewout$summary\nnewout$goodness_of_fit\nx <- pnri.out\npred_dat <- function (x, y) {\n  mod_est <- x$summary$coefficients\n  mod_cor <- x$summary$correlation\n  est_se <- mod_est[, 2]; vcov_mat <- mod_cor * outer(est_se, est_se)\n  R <- qchisq(level, df = 3)\n  \n  \n  dfunc <- function(y, a = mod_est[2, 1], b = mod_est[3, 1], c = mod_est[1, 1]) {\n    abs((-a + sqrt((a ^ 2) + (4 * b) * (y - c))) / (2 * b))\n  }\n  \n  fit_df <- matrix(NA, 600, 3)\n  for (i in seq(0, 6, by = 0.01)) {\n    yy <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2)\n    y_u <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2) + sqrt(R) * \n      sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + vcov_mat[3, 3] * (i ^ 4) +\n             2 * vcov_mat[1, 2] * i + 2 * vcov_mat[1, 3] * (i ^ 2) + 2 * vcov_mat[2, 3] * (i ^ 3))\n    y_l <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2) - sqrt(R) * \n      sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + vcov_mat[3, 3] * (i ^ 4) +\n             2 * vcov_mat[1,2] * i + 2 * vcov_mat[1,3] * (i ^ 2) + 2 * vcov_mat[2, 3] * (i ^ 3))\n    \n    fit_df[i * 100, ] <- c(y_l, yy, y_u)\n  }\n  \nwhich(fit_df[, 1] - fit_df[4 * 100, 2] > 0)[1] / 100\nwhich(fit_df[, 3] - fit_df[4 * 100, 2] > 0)[1] / 100\nfit_df[530, 1]\nfit_df[400, 2]\n?panel.polygon\n\nyy\ny_u\n489/100\nseq(0, 6, by = 0.01)\n6/\n  0.01*489\n}\n\nlibrary(Radica)\n\n# Preliminary\nfit_dat <- fit_coef(Mev4He, cells = cell, aberrations = aberr, doses = doses, cell.dist = c(4, 11),\n                    model = \"l\", dist = \"overdispersed\", curve = TRUE)\ndose_curve(fit_dat, newdat = newdf)\nfit_dat <- fit_coef(Cobalt60, cells = cell, aberrations = aberr, doses = doses, cell.dist = c(4, 9),\n                    model = \"lq\", curve = TRUE)\ndose_curve(fit_dat, newdat = newdf)\nfit_dat <- fit_coef(Cobalt60, cells = cell, aberrations = aberr, doses = doses, cell.dist = c(4, 9),\n                    model = \"lq\", curve = TRUE)\ndose_curve(fit_dat, newdat = newdf)\n\nCobalt60\nnewdf\n\n\n\nnewdf <- read.table(\"~/Documents/PNRI4.txt\", header = TRUE)\nnewdf\nsum(newdf$Cells)\nnewout <- Radica::fit_coef(\n  newdf, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 10), na.rm = TRUE, curve = FALSE\n)\n\nyl <- 22.945/256\nyu <- 45.28/256\n\nyl <- 22.945/256\nyu <- 45.28/256\n\nnewdf\ndose_curve(pnri.out, newdat = newdf, level = .95)\n\n\ndose_curve1 <- function (x, yci = NULL, eta = .0001, level = 0.95, xaxis = NULL, newdat = NULL, ...) {\n  x <- pnri.out\n  yci <- c(yl, yu)\n  newdat = newdf[1, ] %>% as.data.frame\n  \n  level = .95\n  eta = .0001\n  doses <- x$preliminary[, 1]; cells <- x$preliminary[, 2]; aberrations <- x$preliminary[, 3]\n  fit <- x$fitted_values$fit; mod_est <- x$summary$coefficients; mod_cor <- x$summary$correlation\n  est_se <- mod_est[, 2]; vcov_mat <- mod_cor * outer(est_se, est_se)\n  if (nrow(mod_est) == 3)\n    R <- qchisq(level, df = 3)\n  if (nrow(mod_est) == 2)\n    R <- qchisq(level, df = 2)\n  \n  scales <- list()\n  if (!is.null(xaxis) && is.numeric(xaxis)) {\n    scales <- list(\n      x = list(\n        at = xaxis,\n        labels = xaxis\n      )\n    ) \n  }\n  \n  xyplot(aberrations / cells ~ doses, xlab = \"Doses\", \n         ylab = \"Aberration per cell\", cex = 1.5, pch = 19, col = \"#0080ff\",\n         key = list(\n           corner = c(.02, .98),\n           rectangles = list(col = c(\"#0080ff\", \"#ff00ff\", \"darkgreen\"), size = 4.5, height = 0.8),\n           text = list(c(\"Data\", \"Fitted\", \"95% C.I.\"))),\n         scales = scales,\n         panel = function (x, y, ...) {\n           if (is.null(xaxis)) {\n             panel.grid(h = -1, v = -1, col.line = \"cornsilk2\")\n           } else if (!is.null(xaxis) && is.numeric(xaxis)) {\n             panel.grid(h = -1, v = 0, col.line = \"cornsilk2\")\n             panel.abline(v = xaxis, col = \"cornsilk2\")\n           }\n           \n           if (is.null(newdat)) {\n             panel.xyplot(x, y, ...) \n           } else if (!is.null(newdat)) {\n             if (is.null(yci)) stop('Supply the Y_U and Y_L, see Crow et. al (1959)')\n             if (nrow(mod_est) == 3) {\n               dfunc <- function(y, a = mod_est[2, 1], b = mod_est[3, 1], c = mod_est[1, 1]) {\n                 abs((-a + sqrt((a ^ 2) + (4 * b) * (y - c))) / (2 * b))\n               }\n               \n               fit_df <- matrix(NA, 6000, 3)\n               for (i in seq(0, 6, by = 0.001)) {\n                 yy <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2)\n                 y_u <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2) + sqrt(R) * \n                   sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + vcov_mat[3, 3] * (i ^ 4) +\n                          2 * vcov_mat[1, 2] * i + 2 * vcov_mat[1, 3] * (i ^ 2) + 2 * vcov_mat[2, 3] * (i ^ 3))\n                 y_l <- mod_est[1, 1] + mod_est[2, 1] * i + mod_est[3, 1] * (i ^ 2) - sqrt(R) * \n                   sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + vcov_mat[3, 3] * (i ^ 4) +\n                          2 * vcov_mat[1,2] * i + 2 * vcov_mat[1,3] * (i ^ 2) + 2 * vcov_mat[2, 3] * (i ^ 3))\n                 \n                 fit_df[i * 1000, ] <- c(y_l, yy, y_u)\n               }\n             } else if (nrow(mod_est) == 2) {\n               dfunc <- function (y, a = mod_est[2, 1], c = mod_est[1, 1]) {\n                 (y - c) / a\n               }\n               \n               fit_df <- matrix(NA, 6000, 3)\n               for (i in seq(0, 6, by = 0.001)) {\n                 yy <- mod_est[1, 1] + mod_est[2, 1] * i\n                 y_u <- mod_est[1, 1] + mod_est[2, 1] * i + sqrt(R) * \n                   sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + 2 * vcov_mat[1, 2] * i)\n                 y_l <- mod_est[1, 1] + mod_est[2, 1] * i - sqrt(R) * \n                   sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (i ^ 2) + 2 * vcov_mat[1, 2] * i)\n                 \n                 fit_df[i * 1000, ] <- c(y_l, yy, y_u)\n               }\n             }\n             \n             cil <- fit_df[, 3] - yci[1]\n             cil_indx <- which((cil > 0) & (cil < eta))\n             cil <- cil[(cil > 0) & (cil < eta)][1]\n             \n             ciu <- fit_df[, 1] - yci[2]\n             ciu_indx <- which((ciu > 0) & (ciu < eta))\n             ciu <- ciu[(ciu > 0) & (ciu < eta)][1]\n             \n             dose_est <- dfunc(newdat[,3] / newdat[,2])\n             panel.xyplot(dose_est, newdat[,3] / newdat[,2], ...)\n             panel.arrows(dose_est, newdat[,3] / newdat[,2], dose_est, 0, length = 0.15, col = \"#0080ff\")\n             panel.abline(v = newdat[,1], col = \"red\")\n             panel.segments(0, yci[1], cil_indx * .001, fit_df[cil_indx, 3], col = \"gray\", lty = \"dashed\", lwd = 2)\n             panel.segments(cil_indx * .001, yci[1], cil_indx * .001, 0, col = \"gray\", lty = \"dashed\", lwd = 2)\n             \n             panel.segments(0, yci[2], ciu_indx * .001, fit_df[ciu_indx, 1], col = \"gray\", lty = \"dashed\", lwd = 2)\n             panel.segments(ciu_indx * .001, yci[2], ciu_indx * .001, 0, col = \"gray\", lty = \"dashed\", lwd = 2)\n           }\n           if (nrow(mod_est) == 3) {\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2), from = 0, to = max(doses), lwd = 2, col = \"#ff00ff\")\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) + sqrt(R) * \n                           sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                  2 * vcov_mat[1, 2] * x + 2 * vcov_mat[1, 3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + mod_est[3, 1] * (x ^ 2) - sqrt(R) * \n                           sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + vcov_mat[3, 3] * (x ^ 4) +\n                                  2 * vcov_mat[1,2] * x + 2 * vcov_mat[1,3] * (x ^ 2) + 2 * vcov_mat[2, 3] * (x ^ 3)), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\") \n           } else if (nrow(mod_est) == 2) {\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x, from = 0, to = max(doses), lwd = 2, col = \"#ff00ff\")\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x + sqrt(R) * \n                           sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + 2 * vcov_mat[1, 2] * x), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n             panel.curve(expr = mod_est[1, 1] + mod_est[2, 1] * x - sqrt(R) * \n                           sqrt(vcov_mat[1, 1] + vcov_mat[2, 2] * (x ^ 2) + 2 * vcov_mat[1, 2] * x), from = 0, to = max(doses), lwd = 2, col = \"darkgreen\")\n           }\n         })\n         ,...)\n}\n\n\n\nlibrary(lattice)\n### Micronuclues data\nlibrary(Radica)\nmnucleus <- read.table(\"~/Documents/PNRI5.txt\", header = TRUE)\nmnuc_fit <- fit_coef(\n  mnucleus, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 9), na.rm = TRUE, curve = TRUE, model = \"lq\"\n)\nmnucleus\nmnuc_fit$preliminary\nmnuc_fit$summary\nmnuc_fit$goodness_of_fit\ndose_curve(mnuc_fit)\n\n\nlibrary(Radica)\nmnucleus <- read.table(\"~/Documents/Micronucleus\", header = TRUE)\nmnucleus\nu.test\nmnuc_fit <- fit_coef(\n  mnucleus, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 9), na.rm = TRUE, curve = TRUE, model = \"lq\", level = .99\n)\nmnuc_fit$preliminary\nmnuc_fit$summary\ncmnuc_fit$goodness_of_fit\ndose_curve1(mnuc_fit)\n\n\n# Sample Data\nlibrary(Radica)\nPNRI.df <- read.table(\"~/Documents/PNRI2.txt\", header = TRUE)\nPNRI.df\npnri.out <- fit_coef(\n  PNRI.df, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 10), na.rm = TRUE, curve = TRUE\n)\n\npnri.out$summary\npnri.out$goodness_of_fit\n# Validation\nnewdf <- read.table(\"~/Documents/PNRI4.txt\", header = TRUE)\nnewdf\nsum(newdf$Cells)\nnewout <- Radica::fit_coef(\n  newdf, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 10), na.rm = TRUE, curve = FALSE\n)\n\n# 2GY\nyl <- 22.945/256\nyu <- 45.28/256\n\n# 4GY\nyl <- 175.485/492 * ((175.485/202)**(sqrt(newout$preliminary$disp_idx[2])))\nyu <- 230.28/492 * ((230.28/202)**(sqrt(newout$preliminary$disp_idx[2])))\nyl\nyu\nnewdf\nnewout$preliminary\n\ndose_curve(pnri.out, yci = c(yl, yu), newdat = newdf[2,], level = .83, eta = .001)\n\npnri.out$summary\nnewout$preliminary\nnewout$summary\nnewout$goodness_of_fit\n\ndfunc <- function(y) {\n  abs((-0.0336027 + sqrt((0.0336027 ^ 2) + (4 * 0.0236312) * (y - 0.0003298))) / (2 * 0.0236312))\n}\ndfunc(202/492)\ndfunc(33/224)\ndfunc(5/278)\n33/224\n202/492\n\n\n\n#### Final Data for the Micronucleus\nlibrary(Radica)\nmnucleus <- read.table(\"~/Documents/PNRI5.txt\", header = TRUE)\nmnuc_fit <- fit_coef(\n  mnucleus, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 9), na.rm = TRUE, curve = TRUE, model = \"lq\"\n)\nmnucleus\nmnuc_fit$preliminary\nmnuc_fit$summary\nmnuc_fit$goodness_of_fit\nmnuc_fit$summary$coefficients[1,1]\nfit <- mnuc_fit\ndose_fun <- function(y, fit) {\n  alph <- fit$summary$coefficients[2,1]\n  beta <- fit$summary$coefficients[3,1]\n  cons <- fit$summary$coefficients[1,1]\n  \n  alph <- 2.10e-2\n  beta <- 6.31e-2\n  cons <- 1.28e-3\n  y <- 36.03/500\n  y <- 16.77/500\n  y <- 3.285/5435\n  abs((-alph + (alph**2 + 4*beta*(y - cons)) %>% sqrt) / (2*beta))\n}\n\ndose_fun(.02, mnuc_fit)\n\n\n#### Donor 1\nlibrary(Radica)\nmnucleus1 <- read.table(\"~/Documents/PNRI5d23.txt\", header = TRUE)\nmnuc_fit1 <- fit_coef(\n  mnucleus1, cells = Cells, aberrations = Dice, doses = Dose,\n  cell.dist = c(4, 9), na.rm = TRUE, curve = TRUE, model = \"lq\"\n)\nmnucleus1\nmnuc_fit1$preliminary\nmnuc_fit1$preliminary[,-12]\nmnuc_fit1$summary\nmnuc_fit1$goodness_of_fit\ndose_curve(mnuc_fit1)\n",
    "created" : 1467176509053.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3349349765",
    "id" : "BC2EB74F",
    "lastKnownWriteTime" : 1460166824,
    "last_content_update" : 1460166824,
    "path" : "~/Dropbox/BioDosimetry/R Code Biodosimetry.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}